
# Q. A heap is great for finding the minimum and adding new
#    elements but you can't change the key of an element if you
#    discover a shorter path. Would it be more efficient with
#    a balanced binary tree?
# A1. Not necessary in this case as the key is never changed.
# A2. what if I did use a red-black tree anyway?
# 
# Python red-black trees
#
# * blackjack: https://github.com/MostAwesomeDude/blackjack/
#   -> nice set-like interface
#   -> appears incompatible with recent Python 3
#
# * red_black_set_mod:
#     https://stromberg.dnsalias.org/~strombrg/red-black-tree-mod/
#   -> worked ok but no easy way to remove the minimum element,
#      have to awkwardly pry into the data structure, luckily there
#      is at least a "minimum" property
#   -> no "isempty" operation and len() is O(N) time
#      however T.minimum.key will be None if empty.
#   -> uses random.random()... !
# 
# * rbtree
#   -> pip installation failed (broken package?)
#
# * redblacktree
#     https://github.com/leryss/py-redblacktree
#   -> no easy way to find/remove the minimum element, have to call
#      a "_" prefix function this time!
#   -> no "isempty" operation and len() is O(N) time
#      however T.root.key will be None if empty.
#
# * pybst
#      https://github.com/TylerSandman/py-bst
#   -> appears incompatible with recent Python 3
#
# * bintrees
#   -> redirects to sortedcontainers
#
# * sortedcontainers
#      http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html
#   -> nice dict-like interface
#   -> forced a hashable "key" property for the items
#   -> Not actually a red-black tree, or a binary tree of any sort...
#      or even a B-tree, since it is limited to depth 2. Convincing
#      arguments. Found it was fast.
#
